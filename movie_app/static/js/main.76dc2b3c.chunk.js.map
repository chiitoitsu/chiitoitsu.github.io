{"version":3,"sources":["Movie.js","Movie2.js","App.js","serviceWorker.js","index.js"],"names":["Movie","this","props","title","poster","Component","MoviePoster","src","alt","width","MoviePoster2","className","MovieGenre","genre","Movie2","genres","synopsis","map","index","key","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","movies","movie","title_english","medium_cover_image","id","_renderMovies2","_getMovies","a","async","_callApi","setState","fetch","then","response","json","data","catch","err","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAIMA,G,4LAOJ,OACC,6BACC,4BAAKC,KAAKC,MAAMC,OAChB,kBAAC,EAAD,CAAaA,MAAOF,KAAKC,MAAMC,MAAOC,OAAQH,KAAKC,MAAME,c,GAVzCC,cAgBdC,E,iLAOJ,OAAO,yBAAKC,IAAKN,KAAKC,MAAME,OAAQI,IAAKP,KAAKC,MAAMC,MAAOM,MAAM,c,GAPzCJ,aAWXL,I,iBCEf,SAASU,EAAT,GAA0C,IAAlBP,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OAC9B,OAAO,yBAAKO,UAAU,eAAeJ,IAAKH,EAAQI,IAAKL,IAGxD,SAASS,EAAT,GAAgC,IAAVC,EAAS,EAATA,MACrB,OAAO,0BAAMF,UAAU,eAAeE,EAA/B,KAoBOC,MApDf,YAAsD,IAApCX,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,OAAQW,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SACxC,OACC,yBAAKL,UAAU,SACd,yBAAKA,UAAU,gBACd,kBAACD,EAAD,CAAcP,MAAOA,EAAOC,OAAQA,KAErC,yBAAKO,UAAU,gBACd,4BAAKR,GACL,yBAAKQ,UAAU,gBACbI,EAAOE,KAAI,SAACJ,EAAOK,GAAR,OACX,kBAACN,EAAD,CAAYC,MAAOA,EAAOM,IAAKD,QAGjC,yBAAKP,UAAU,kBACd,kBAAC,IAAD,CACCS,KAAMJ,EACNK,QAAS,EACTC,SAAS,OACTC,WAAS,EACTC,QAAQ,cCsCCC,E,2MAzDdC,MAAQ,G,EAMRC,cAAgB,WAUf,OATe,EAAKD,MAAME,OAAOX,KAAI,SAAAY,GACpC,OACC,kBAAC,EAAD,CACC1B,MAAO0B,EAAMC,cACb1B,OAAQyB,EAAME,mBACdZ,IAAKU,EAAMG,S,EAOfC,eAAiB,WAYhB,OAXe,EAAKP,MAAME,OAAOX,KAAI,SAAAY,GACpC,OACC,kBAAC,EAAD,CACC1B,MAAO0B,EAAMC,cACb1B,OAAQyB,EAAME,mBACdZ,IAAKU,EAAMG,GACXjB,OAAQc,EAAMd,OACdC,SAAUa,EAAMb,e,EAOpBkB,WAAa,0BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACS,EAAKE,YADd,OACNT,EADM,OAEZ,EAAKU,SAAS,CACbV,OAAQA,IAHG,sC,EAObS,SAAW,WACV,OAAOE,MAAM,4DACXC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKf,UACvBgB,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,mFA1C3B5C,KAAKiC,e,+BA8CL,OACC,yBAAKvB,UAAWV,KAAKyB,MAAME,OAAS,MAAQ,gBAC1C3B,KAAKyB,MAAME,OAAS3B,KAAKgC,iBAAmB,e,GApD/B5B,aCOE2C,QAEU,cAA7BC,OAAOC,SAASC,UAEc,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCZjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H5C,kBAAmBC,WACtBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GAClCA,EAAaC,iB","file":"static/js/main.76dc2b3c.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './Movie.css'\r\n\r\nclass Movie extends Component {\r\n\tstatic propTypes = {\r\n\t\ttitle: PropTypes.string.isRequired,\r\n\t\tposter: PropTypes.string.isRequired\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>{this.props.title}</h1>\r\n\t\t\t\t<MoviePoster title={this.props.title} poster={this.props.poster} />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nclass MoviePoster extends Component {\r\n\tstatic propTypes = {\r\n\t\ttitle: PropTypes.string.isRequired,\r\n\t\tposter: PropTypes.string.isRequired\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <img src={this.props.poster} alt={this.props.title} width='300px'></img>\r\n\t}\r\n}\r\n\r\nexport default Movie\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css'\r\n\r\n// Dumb Component\r\nfunction Movie2({ title, poster, genres, synopsis }) {\r\n\treturn (\r\n\t\t<div className='Movie'>\r\n\t\t\t<div className='Movie_Column'>\r\n\t\t\t\t<MoviePoster2 title={title} poster={poster} />\r\n\t\t\t</div>\r\n\t\t\t<div className='Movie_Column'>\r\n\t\t\t\t<h1>{title}</h1>\r\n\t\t\t\t<div className='Movie_Genres'>\r\n\t\t\t\t\t{genres.map((genre, index) => (\r\n\t\t\t\t\t\t<MovieGenre genre={genre} key={index} />\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='Movie_Synopsis'>\r\n\t\t\t\t\t<LinesEllipsis\r\n\t\t\t\t\t\ttext={synopsis}\r\n\t\t\t\t\t\tmaxLine={3}\r\n\t\t\t\t\t\tellipsis=' ...'\r\n\t\t\t\t\t\ttrimRight\r\n\t\t\t\t\t\tbasedOn='words'\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nfunction MoviePoster2({ title, poster }) {\r\n\treturn <img className='Movie_Poster' src={poster} alt={title} />\r\n}\r\n\r\nfunction MovieGenre({ genre }) {\r\n\treturn <span className='Movie_Genre'>{genre} </span>\r\n}\r\n\r\n// PropType Check for dumb component\r\nMovie2.propTypes = {\r\n\ttitle: PropTypes.string.isRequired,\r\n\tposter: PropTypes.string.isRequired,\r\n\tgenres: PropTypes.array.isRequired,\r\n\tsynopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster2.propTypes = {\r\n\ttitle: PropTypes.string.isRequired,\r\n\tposter: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n\tgenre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie2\r\n","import React, { Component } from 'react'\r\nimport './App.css'\r\nimport Movie from './Movie'\r\nimport Movie2 from './Movie2'\r\n\r\nclass App extends Component {\r\n\tstate = {}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis._getMovies()\r\n\t}\r\n\r\n\t_renderMovies = () => {\r\n\t\tconst movies = this.state.movies.map(movie => {\r\n\t\t\treturn (\r\n\t\t\t\t<Movie\r\n\t\t\t\t\ttitle={movie.title_english}\r\n\t\t\t\t\tposter={movie.medium_cover_image}\r\n\t\t\t\t\tkey={movie.id}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\t})\r\n\t\treturn movies\r\n\t}\r\n\r\n\t_renderMovies2 = () => {\r\n\t\tconst movies = this.state.movies.map(movie => {\r\n\t\t\treturn (\r\n\t\t\t\t<Movie2\r\n\t\t\t\t\ttitle={movie.title_english}\r\n\t\t\t\t\tposter={movie.medium_cover_image}\r\n\t\t\t\t\tkey={movie.id}\r\n\t\t\t\t\tgenres={movie.genres}\r\n\t\t\t\t\tsynopsis={movie.synopsis}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\t})\r\n\t\treturn movies\r\n\t}\r\n\r\n\t_getMovies = async () => {\r\n\t\tconst movies = await this._callApi()\r\n\t\tthis.setState({\r\n\t\t\tmovies: movies\r\n\t\t})\r\n\t}\r\n\r\n\t_callApi = () => {\r\n\t\treturn fetch('https://yts-proxy.now.sh/list_movies.json?sort_by=rating')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(json => json.data.movies)\r\n\t\t\t.catch(err => console.log(err))\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className={this.state.movies ? 'App' : 'App--loading'}>\r\n\t\t\t\t{this.state.movies ? this._renderMovies2() : 'Loading'}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    // [::1] is the IPv6 localhost address.\r\n\twindow.location.hostname === 'localhost' ||\r\n\t\t// [::1] is the IPv6 localhost address.\r\n\t\twindow.location.hostname === '[::1]' ||\r\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\r\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n)\r\n\r\nexport function register(config) {\r\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n\t\t// The URL constructor is available in all browsers that support SW.\r\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n\t\tif (publicUrl.origin !== window.location.origin) {\r\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\r\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\r\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\twindow.addEventListener('load', () => {\r\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n\t\t\tif (isLocalhost) {\r\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\r\n\t\t\t\tcheckValidServiceWorker(swUrl, config)\r\n\r\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\r\n\t\t\t\t// service worker/PWA documentation.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\r\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n\t\t\t\t\t)\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\t// Is not localhost. Just register service worker\r\n\t\t\t\tregisterValidSW(swUrl, config)\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n\tnavigator.serviceWorker\r\n\t\t.register(swUrl)\r\n\t\t.then(registration => {\r\n\t\t\tregistration.onupdatefound = () => {\r\n\t\t\t\tconst installingWorker = registration.installing\r\n\t\t\t\tif (installingWorker == null) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\tinstallingWorker.onstatechange = () => {\r\n\t\t\t\t\tif (installingWorker.state === 'installed') {\r\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\r\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\r\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\r\n\t\t\t\t\t\t\t// content until all client tabs are closed.\r\n\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\r\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n\t\t\t\t\t\t\t)\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\r\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// At this point, everything has been precached.\r\n\t\t\t\t\t\t\t// It's the perfect time to display a\r\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\r\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.')\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\r\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tconsole.error('Error during service worker registration:', error)\r\n\t\t})\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n\t// Check if the service worker can be found. If it can't reload the page.\r\n\tfetch(swUrl, {\r\n\t\theaders: { 'Service-Worker': 'script' }\r\n\t})\r\n\t\t.then(response => {\r\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\r\n\t\t\tconst contentType = response.headers.get('content-type')\r\n\t\t\tif (\r\n\t\t\t\tresponse.status === 404 ||\r\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\r\n\t\t\t) {\r\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\t\t\tregistration.unregister().then(() => {\r\n\t\t\t\t\t\twindow.location.reload()\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\t// Service worker found. Proceed as normal.\r\n\t\t\t\tregisterValidSW(swUrl, config)\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(() => {\r\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.')\r\n\t\t})\r\n}\r\n\r\nexport function unregister() {\r\n\tif ('serviceWorker' in navigator) {\r\n\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\tregistration.unregister()\r\n\t\t})\r\n\t}\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}